<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Easyx</title>
      <link href="/2022/05/05/easyx/"/>
      <url>/2022/05/05/easyx/</url>
      
        <content type="html"><![CDATA[<h1 id="Easyx"><a href="#Easyx" class="headerlink" title="Easyx"></a>Easyx</h1><h4 id="图形库"><a href="#图形库" class="headerlink" title="图形库"></a>图形库</h4><pre><code>#include&lt;easyx.h&gt;</code></pre><h4 id="创建窗口"><a href="#创建窗口" class="headerlink" title="创建窗口"></a>创建窗口</h4><pre class=" language-C语言"><code class="language-C语言">HWND initgraph(    int width,    int height,    int flag = NULL);</code></pre><p>其中flag取值有：<br>EW_DBLCLKS  在绘图窗口中支持鼠标双击事件。<br>EW_NOCLOSE禁用绘图窗口的关闭按钮。<br>EW_NOMINIMIZE  禁用绘图窗口的最小化按钮。<br>EW_SHOWCONSOLE显示控制台窗口。</p><h4 id="清除绘图设备-（以背景色）"><a href="#清除绘图设备-（以背景色）" class="headerlink" title="清除绘图设备 （以背景色）"></a>清除绘图设备 （以背景色）</h4><pre class=" language-C语言"><code class="language-C语言">cleardevice();</code></pre><h4 id="关闭窗口"><a href="#关闭窗口" class="headerlink" title="关闭窗口"></a>关闭窗口</h4><pre class=" language-C语言"><code class="language-C语言">closegraph();</code></pre><h4 id="设置背景颜色"><a href="#设置背景颜色" class="headerlink" title="设置背景颜色"></a>设置背景颜色</h4><p>在设置背景色之后，并不会改变现有背景色，而是只改变背景色的值，之后再执行绘图语句，例如 outtextxy，会使用新设置的背景色值。<br>如果需要修改全部背景色，可以在设置背景色后执行 cleardevice() 函数。</p><pre class=" language-C语言"><code class="language-C语言">void setbkcolor(COLORREF color);</code></pre><h4 id="绘制一个简单de图形"><a href="#绘制一个简单de图形" class="headerlink" title="绘制一个简单de图形"></a>绘制一个简单de图形</h4><pre class=" language-C语言"><code class="language-C语言">// 设置边和填充格式setfillcolor(YELLOW);setlinecolor(GREEN);setlinestyle(PS_SOLID, 5);// 绘制圆circle(50, 50, 50);  // 无填充的圆fillcircle(150, 150, 50);  // 有边框的填充圆solidcircle(250, 250, 50);  // 无边框的填充圆</code></pre><h4 id="绘制文字"><a href="#绘制文字" class="headerlink" title="绘制文字"></a>绘制文字</h4><pre class=" language-C语言"><code class="language-C语言">settextstyle(50, 0, "等线 Light");settextcolor(RGB(117, 101, 235));// 设置背景模式  transparent (文字“透明”)setbkmode(TRANSPARENT);outtextxy(250, 250, "Helloworld");//outtextxy(400, 400, TEXT("Helloworld"));</code></pre><pre class=" language-C语言"><code class="language-C语言">// 文字输出有多种情况// 输出字符串（MBCS 字符集）char s[] = "Hello World";outtextxy(10, 20, s);// 输出字符串（Unicode 字符集）wchar_t s[] = L"Hello World";outtextxy(10, 20, s);// 输出字符串（自适应字符集）TCHAR s[] = _T("Hello World");outtextxy(10, 20, s);// 输出字符（MBCS 字符集）char c = 'A';outtextxy(10, 40, c);// 输出字符（自适应字符集）TCHAR c = _T('A');outtextxy(10, 40, c);// 输出数值，先将数字格式化输出为字符串（MBCS 字符集）char s[5];sprintf(s, "%d", 1024);outtextxy(10, 60, s);// 输出数值 1024，先将数字格式化输出为字符串（自适应字符集）TCHAR s[5];_stprintf(s, _T("%d"), 1024);// 高版本 VC 推荐使用 _stprintf_s 函数outtextxy(10, 60, s);</code></pre><ul><li>文字zai一个矩阵居中显示</li></ul><pre class=" language-C语言"><code class="language-C语言">fillrectangle(200, 50, 800, 100); // 绘制一个矩阵settextcolor(RGB(169, 1, 1));char text_arr[] = "我是居中显示的文字";// 简单计算int x = 200 + 300 - textwidth(text_arr)/2;int y = textheight(text_arr);outtextxy(x, 50, text_arr);</code></pre><h4 id="图片-填充ing"><a href="#图片-填充ing" class="headerlink" title="图片 (填充ing)"></a>图片 (填充ing)</h4><pre class=" language-C语言"><code class="language-C语言">IMAGE img1; // 定义一个图片变量// 加载图片loadimage(&img1, "./IMG1.jpg");putimage(0, 0, &img1);</code></pre><h4 id="鼠标操作"><a href="#鼠标操作" class="headerlink" title="鼠标操作"></a>鼠标操作</h4><pre class=" language-C语言"><code class="language-C语言">while(1){    if (MouseHit()) {        // cleardevice();        // 定义按键变量        MOUSEMSG msg = GetMouseMsg();        // 记录鼠标位置        // printf("坐标（%d, %d）", msg.x, msg.y);        // 判断鼠标点击位置         if (msg.x > 200 && msg.y > 50 && msg.x < 800 && msg.y < 100) {            printf("Hello easyx\n");            printf("坐标（%d, %d）\n", msg.x, msg.y);        }        switch (msg.uMsg) {        case WM_LBUTTONDOWN:            outtextxy(400, 400, "鼠标左键按下");            break;        case WM_RBUTTONDOWN:            outtextxy(400, 400, "鼠标右键按下");            break;        }    }}</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Easyx </tag>
            
            <tag> c </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>双链表</title>
      <link href="/2022/05/04/shuang-lian-biao/"/>
      <url>/2022/05/04/shuang-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h1><h3 id="创建双链表结构体"><a href="#创建双链表结构体" class="headerlink" title="创建双链表结构体"></a>创建双链表结构体</h3><pre class=" language-C语言"><code class="language-C语言">typedef struct line{    int data;    struct line *pre; //指向前一个元素的指针    struct line *next;  //指向下一个元素的指针}line, *a;</code></pre><h3 id="创建双链表"><a href="#创建双链表" class="headerlink" title="创建双链表"></a>创建双链表</h3><pre class=" language-C语言"><code class="language-C语言">line* initLine(line * head){    int num, pos, input_data;    printf("输入创建节点的数量\n");    scanf("%d",&num);    if(num < 1) return NULL;    head = (line*) malloc(sizeof(line));    head->pre =NULL;    head->next = NULL;    printf("请输入第%d个数据\n", pos++);    scanf("%d",&input_data);    head->data = input_data; //头初始化        line * list = head; // 导入变量list 继续连接链表 保留head指针位置    while(pos <= num){        line * body = (line*)malloc(sizeof(line));        body->pre = NULL;        body->next = NULL;  // 创建body连接链表        printf("请输入第%d个数据\n",pos++);        scanf("%d",&input_data);        body->data = input_data;                list->next = body;  // 已存指向body        body->pre = list;  // body-pre指针指向已存        list = list->next;  // list定位到新元素    }    return head;}</code></pre><h3 id="双链表的元素插入"><a href="#双链表的元素插入" class="headerlink" title="双链表的元素插入"></a>双链表的元素插入</h3><pre class=" language-C语言"><code class="language-C语言">line * insertLine(line * head, int data, int add){    line * temp = (line *) malloc(sizeof(line));    temp->data = data;    temp->pre = NULL;    temp->next = NULL;    if(add == 1){        temp->next = head;          head->pre = temp;        head = temp;    }    else{        line * body = head;        for(int i = 0; i<add-1;i++){            body = body->next;        }        if(body->next ==NULL){  // 如果新元素是尾            body->next = temp;  //现存指向新元素temp            temp->pre = body;  //新元素指向NULL，        }else{  // 新元素在中间            body->next->pre = temp;  // 目标位置的下一个元素的pre指针指向temp            temp->next = body->next;  //temp 的next指针指向目标位置的下一个元素            body->next = temp; // 目标位置的next指针指向temp            temp->pre = body;  // temp的pre指针指向body        }    }    return head;}</code></pre><h3 id="目标元素的删除"><a href="#目标元素的删除" class="headerlink" title="目标元素的删除"></a>目标元素的删除</h3><pre class=" language-C语言"><code class="language-C语言">line * delLine(line * head, int data){    line * list = head;    while(list){        if(list->data == data){            list->pre->next = list->next;  // 目标前一个元素next指向目标下一个元素            list->next = list->pre;  // 目标下一个元素pre指向目标前一个元素            free(list);  // 释放空间            printf("删除成功~");            return head;        }        list = list->next;    }    printf("Error：没有目标元素");    return head;}</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Data structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单链表</title>
      <link href="/2022/05/03/dan-lian-biao/"/>
      <url>/2022/05/03/dan-lian-biao/</url>
      
        <content type="html"><![CDATA[<h1 id="单链表-C"><a href="#单链表-C" class="headerlink" title="单链表 C"></a>单链表 C</h1><h3 id="定义单链表结构体"><a href="#定义单链表结构体" class="headerlink" title="定义单链表结构体"></a>定义单链表结构体</h3><pre class=" language-C语言"><code class="language-C语言">typedef struct Node{      int data;      struct Node *next;  }Node, *LinkedList;</code></pre><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><pre class=" language-C语言"><code class="language-C语言">LinkedList listinit(){      Node *L;      L = (Node*)malloc(sizeof(Node));       if(L == NULL){     printf("申请失败！");    }    L ->next = NULL;}</code></pre><h3 id="创建单链表"><a href="#创建单链表" class="headerlink" title="创建单链表"></a>创建单链表</h3><h5 id="头插"><a href="#头插" class="headerlink" title="头插"></a>头插</h5><pre class=" language-C语言"><code class="language-C语言">LinkedList LinkedListCreatH(){    Node *L; //开个头 **头上无值**    L = (Node *) malloc(sizeof(Node));  //开辟空间！！    L ->next = NULL;  //确保最先读入的尾是NULL        int x;    while(scanf("%d", &x)!=EOF){        Node *p;        p = (Node *)malloc(sizeof(Node));        p ->data = x;        p ->next = L->next;          L ->next = p;  //尾插头上    }    return L;}</code></pre><h5 id="尾插"><a href="#尾插" class="headerlink" title="尾插"></a>尾插</h5><pre class=" language-C语言"><code class="language-C语言">LinkedList LinkedListCreatT(){    Node *L;    L = (Node *) malloc(sizeof(Node));    L->next = NULL;    Node *r;    r = L;    int x;    while(scanf("%d",&x) != EOF){        Node *p;        p = (Node *)malloc(sizeof(Node));        p->data = x;        r->next = p;        r = p;    }    r->next = NULL;    return L;}</code></pre><h3 id="遍历链表"><a href="#遍历链表" class="headerlink" title="遍历链表"></a>遍历链表</h3><pre class=" language-C语言"><code class="language-C语言">void printList(LinkedList L){    Node *p = L->next;    int i = 0;    while(p){        printf("The %dth is %d\n", ++i, p->data);        p = p->next;    }}</code></pre><h3 id="修改某值的元素"><a href="#修改某值的元素" class="headerlink" title="修改某值的元素"></a>修改某值的元素</h3><pre class=" language-C语言"><code class="language-C语言">LinkedList LinkedListReplace(LinkedList L, int x, int k){    Node *p = L->next;  // 定义一个指针指向    while(p){        if(p->data == x){            p->data = k;        }        p = p->next;    }    return L;}</code></pre><h3 id="在某位置插入新元素"><a href="#在某位置插入新元素" class="headerlink" title="在某位置插入新元素"></a>在某位置插入新元素</h3><pre class=" language-C语言"><code class="language-C语言">LinkedList LinkedListInsert(LinkedList L, int i, int x){    Node *pre;    pre = L;    int tempi = 0;    for(tempi = 1; tempi < i; tempi ++){        pre = pre->next;    }    Node *p;    p = (Node *)malloc(sizeof(Node));    p->data = x;    p->next = pre->next;    pre->next = p;        return L;}</code></pre><h3 id="删除某值元素"><a href="#删除某值元素" class="headerlink" title="删除某值元素"></a>删除某值元素</h3><pre class=" language-C语言"><code class="language-C语言">LinkedList LinkedListDel(LinkedList L, int x){    Node *p, *pre;    p = L->next;        while(p->data != x){        pre = p;        p = p->next;    }    pre->next = p->next;        free(p);        return L;}</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Data structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>first_day_Data_Structure</title>
      <link href="/2022/05/03/first-day-data-structure/"/>
      <url>/2022/05/03/first-day-data-structure/</url>
      
        <content type="html"><![CDATA[<p>基本概念和术语</p><p>1)数据</p><p>数据（Data）是信息的载体，是可以被计算机识别，存储并加工处理的描述客观事物的信息符号的总称。数据不仅仅包括了整形，浮点数等数值类型，还包括了字符甚至声音，视频，图像等非数值的类型。</p><p>2)数据元素</p><p>数据元素（Data Element）是描述数据的基本单位，也被称为记录。一个数据元素有若干个数据项组成。</p><p>如禽类，鸡鸭都属于禽类的数据元素。</p><p>3)数据项</p><p>数据项（Data Item）是描述数据的最小单位，其可以分为组合项和原子项：</p><p>a)组合项</p><p>如果数据元素可以再度分割，则每一个独立处理单元就是数据项，数据元素就是数据项的集合。</p><p>b)原子项</p><p>如果数据元素不能再度分割，则每一个独立处理的单元就是原子项。</p><p>如日期2019年4月25日就是一个组合项，其表示日期，但如果单独拿25日这个数据出来观测，这就是一个原子项，因为其不可以再分割。</p><p>4)数据对象</p><p>数据对象（Data Object）是性质相同的一类数据元素的集合，是数据的一个子集。数据对象可以是有限的，也可以是无限的。</p><p>5)数据结构</p><p>数据结构（Data Structures）主要是指数据和关系的集合，数据指的是计算机中需要处理的数据，而关系指的是这些数据相关的前后逻辑，这些逻辑与计算机储存的位置无关，其主要包含以下四大逻辑结构。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Data structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/05/02/hello-world/"/>
      <url>/2022/05/02/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
